/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.acilab.stream.processor.wikilinks.serialization;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Mention extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8609426691547666207L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Mention\",\"namespace\":\"net.acilab.stream.processor.wikilinks.serialization\",\"fields\":[{\"name\":\"mentionstring\",\"type\":\"string\"},{\"name\":\"byteoffset\",\"type\":\"long\"},{\"name\":\"targeturl\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Mention> ENCODER =
      new BinaryMessageEncoder<Mention>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Mention> DECODER =
      new BinaryMessageDecoder<Mention>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Mention> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Mention> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Mention> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Mention>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Mention to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Mention from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Mention instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Mention fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence mentionstring;
  @Deprecated public long byteoffset;
  @Deprecated public java.lang.CharSequence targeturl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Mention() {}

  /**
   * All-args constructor.
   * @param mentionstring The new value for mentionstring
   * @param byteoffset The new value for byteoffset
   * @param targeturl The new value for targeturl
   */
  public Mention(java.lang.CharSequence mentionstring, java.lang.Long byteoffset, java.lang.CharSequence targeturl) {
    this.mentionstring = mentionstring;
    this.byteoffset = byteoffset;
    this.targeturl = targeturl;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mentionstring;
    case 1: return byteoffset;
    case 2: return targeturl;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mentionstring = (java.lang.CharSequence)value$; break;
    case 1: byteoffset = (java.lang.Long)value$; break;
    case 2: targeturl = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mentionstring' field.
   * @return The value of the 'mentionstring' field.
   */
  public java.lang.CharSequence getMentionstring() {
    return mentionstring;
  }


  /**
   * Sets the value of the 'mentionstring' field.
   * @param value the value to set.
   */
  public void setMentionstring(java.lang.CharSequence value) {
    this.mentionstring = value;
  }

  /**
   * Gets the value of the 'byteoffset' field.
   * @return The value of the 'byteoffset' field.
   */
  public long getByteoffset() {
    return byteoffset;
  }


  /**
   * Sets the value of the 'byteoffset' field.
   * @param value the value to set.
   */
  public void setByteoffset(long value) {
    this.byteoffset = value;
  }

  /**
   * Gets the value of the 'targeturl' field.
   * @return The value of the 'targeturl' field.
   */
  public java.lang.CharSequence getTargeturl() {
    return targeturl;
  }


  /**
   * Sets the value of the 'targeturl' field.
   * @param value the value to set.
   */
  public void setTargeturl(java.lang.CharSequence value) {
    this.targeturl = value;
  }

  /**
   * Creates a new Mention RecordBuilder.
   * @return A new Mention RecordBuilder
   */
  public static net.acilab.stream.processor.wikilinks.serialization.Mention.Builder newBuilder() {
    return new net.acilab.stream.processor.wikilinks.serialization.Mention.Builder();
  }

  /**
   * Creates a new Mention RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Mention RecordBuilder
   */
  public static net.acilab.stream.processor.wikilinks.serialization.Mention.Builder newBuilder(net.acilab.stream.processor.wikilinks.serialization.Mention.Builder other) {
    if (other == null) {
      return new net.acilab.stream.processor.wikilinks.serialization.Mention.Builder();
    } else {
      return new net.acilab.stream.processor.wikilinks.serialization.Mention.Builder(other);
    }
  }

  /**
   * Creates a new Mention RecordBuilder by copying an existing Mention instance.
   * @param other The existing instance to copy.
   * @return A new Mention RecordBuilder
   */
  public static net.acilab.stream.processor.wikilinks.serialization.Mention.Builder newBuilder(net.acilab.stream.processor.wikilinks.serialization.Mention other) {
    if (other == null) {
      return new net.acilab.stream.processor.wikilinks.serialization.Mention.Builder();
    } else {
      return new net.acilab.stream.processor.wikilinks.serialization.Mention.Builder(other);
    }
  }

  /**
   * RecordBuilder for Mention instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Mention>
    implements org.apache.avro.data.RecordBuilder<Mention> {

    private java.lang.CharSequence mentionstring;
    private long byteoffset;
    private java.lang.CharSequence targeturl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.acilab.stream.processor.wikilinks.serialization.Mention.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mentionstring)) {
        this.mentionstring = data().deepCopy(fields()[0].schema(), other.mentionstring);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.byteoffset)) {
        this.byteoffset = data().deepCopy(fields()[1].schema(), other.byteoffset);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.targeturl)) {
        this.targeturl = data().deepCopy(fields()[2].schema(), other.targeturl);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Mention instance
     * @param other The existing instance to copy.
     */
    private Builder(net.acilab.stream.processor.wikilinks.serialization.Mention other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mentionstring)) {
        this.mentionstring = data().deepCopy(fields()[0].schema(), other.mentionstring);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.byteoffset)) {
        this.byteoffset = data().deepCopy(fields()[1].schema(), other.byteoffset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.targeturl)) {
        this.targeturl = data().deepCopy(fields()[2].schema(), other.targeturl);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'mentionstring' field.
      * @return The value.
      */
    public java.lang.CharSequence getMentionstring() {
      return mentionstring;
    }


    /**
      * Sets the value of the 'mentionstring' field.
      * @param value The value of 'mentionstring'.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder setMentionstring(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.mentionstring = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mentionstring' field has been set.
      * @return True if the 'mentionstring' field has been set, false otherwise.
      */
    public boolean hasMentionstring() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mentionstring' field.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder clearMentionstring() {
      mentionstring = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'byteoffset' field.
      * @return The value.
      */
    public long getByteoffset() {
      return byteoffset;
    }


    /**
      * Sets the value of the 'byteoffset' field.
      * @param value The value of 'byteoffset'.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder setByteoffset(long value) {
      validate(fields()[1], value);
      this.byteoffset = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'byteoffset' field has been set.
      * @return True if the 'byteoffset' field has been set, false otherwise.
      */
    public boolean hasByteoffset() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'byteoffset' field.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder clearByteoffset() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'targeturl' field.
      * @return The value.
      */
    public java.lang.CharSequence getTargeturl() {
      return targeturl;
    }


    /**
      * Sets the value of the 'targeturl' field.
      * @param value The value of 'targeturl'.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder setTargeturl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.targeturl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'targeturl' field has been set.
      * @return True if the 'targeturl' field has been set, false otherwise.
      */
    public boolean hasTargeturl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'targeturl' field.
      * @return This builder.
      */
    public net.acilab.stream.processor.wikilinks.serialization.Mention.Builder clearTargeturl() {
      targeturl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Mention build() {
      try {
        Mention record = new Mention();
        record.mentionstring = fieldSetFlags()[0] ? this.mentionstring : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.byteoffset = fieldSetFlags()[1] ? this.byteoffset : (java.lang.Long) defaultValue(fields()[1]);
        record.targeturl = fieldSetFlags()[2] ? this.targeturl : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Mention>
    WRITER$ = (org.apache.avro.io.DatumWriter<Mention>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Mention>
    READER$ = (org.apache.avro.io.DatumReader<Mention>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.mentionstring);

    out.writeLong(this.byteoffset);

    out.writeString(this.targeturl);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.mentionstring = in.readString(this.mentionstring instanceof Utf8 ? (Utf8)this.mentionstring : null);

      this.byteoffset = in.readLong();

      this.targeturl = in.readString(this.targeturl instanceof Utf8 ? (Utf8)this.targeturl : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.mentionstring = in.readString(this.mentionstring instanceof Utf8 ? (Utf8)this.mentionstring : null);
          break;

        case 1:
          this.byteoffset = in.readLong();
          break;

        case 2:
          this.targeturl = in.readString(this.targeturl instanceof Utf8 ? (Utf8)this.targeturl : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










